
import random
import matplotlib.pyplot as plt

''' 
Begin helper code
'''

class NoChildException(Exception):
    """
    NoChildException is raised by the reproduce() method in the SimpleVirus
    and ResistantVirus classes to indicate that a virus particle does not
    reproduce. You can use NoChildException as is, you do not need to
    modify/add any code.
    """

'''
End helper code
'''

#
# PROBLEM 1
#
class SimpleVirus(object):

    """
    Representation of a simple virus (does not model drug effects/resistance).
    """
    def __init__(self, maxBirthProb, clearProb):

        """
        Initialize a SimpleVirus instance, saves all parameters as attributes
        of the instance.        
        maxBirthProb: Maximum reproduction probability (a float between 0-1)        
        clearProb: Maximum clearance probability (a float between 0-1).
        """

        
        self.maxBirthProb = maxBirthProb
        self.clearProb = clearProb
        

    def doesClear(self):

        """ Stochastically determines whether this virus particle is cleared from the
        patient's body at a time step. 
        returns: True with probability self.clearProb and otherwise returns
        False.
        """

        prob =  random.random()                       #probability for virus to be cleared. 0  < prob < 1
        if prob < self.clearProb:
        
            return True
        else:
            return False
    
    def reproduce(self, popDensity):

        """
        Stochastically determines whether this virus particle reproduces at a
        time step. Called by the update() method in the SimplePatient and
        Patient classes. The virus particle reproduces with probability
        self.maxBirthProb * (1 - popDensity).
        
        If this virus particle reproduces, then reproduce() creates and returns
        the instance of the offspring SimpleVirus (which has the same
        maxBirthProb and clearProb values as its parent).         

        popDensity: the population density (a float), defined as the current
        virus population divided by the maximum population.         
        
        returns: a new instance of the SimpleVirus class representing the
        offspring of this virus particle. The child should have the same
        maxBirthProb and clearProb values as this virus. Raises a
        NoChildException if this virus particle does not reproduce.               
        """

        prob = random.random()
        if prob <  self.maxBirthProb * (1 - popDensity):
            child = SimpleVirus(self.maxBirthProb, self.clearProb)
            return child

        else:
            raise NoChildException()

class SimplePatient(object):

    """
    Representation of a simplified patient. The patient does not take any drugs
    and his/her virus populations have no drug resistance.
    """    

    def __init__(self, viruses, maxPop):

        """

        Initialization function, saves the viruses and maxPop parameters as
        attributes.

        viruses: the list representing the virus population (a list of
        SimpleVirus instances)

        maxPop: the  maximum virus population for this patient (an integer)
        """

        self.viruses = viruses
        self.maxPop = maxPop
        


    def getTotalPop(self):

        """
        Gets the current total virus population. 
        returns: The total virus population (an integer)
        """

        return len(self.viruses)


    def update(self):

        """
        Update the state of the virus population in this patient for a single
        time step. update() should execute the following steps in this order:
        
        - Determine whether each virus particle survives and updates the list
        of virus particles accordingly.   
        - The current population density is calculated. This population density
          value is used until the next call to update() 
        - Determine whether each virus particle should reproduce and add
          offspring virus particles to the list of viruses in this patient.                    

        returns: The total virus population at the end of the update (an
        integer)
        """

        survivedViruses = []
        for virus in self.viruses:
            if  not virus.doesClear():
                survivedViruses.append(virus)
        popDensity = float(len(survivedViruses))/self.maxPop
        self.viruses = survivedViruses
        childViruses = []
        for virus in self.viruses:
            childViruses.append(virus)
            try:
                child = virus.reproduce(popDensity)
                childViruses.append(child)
            except NoChildException:
                 pass
        self.viruses = childViruses
        return self.getTotalPop()
    



#
# PROBLEM 2
#
def simulationWithoutDrug(numViruses = 100, maxPop = 1000, maxBirthProb = 0.1, clearProb = 0.05, numTrials = 100):

    """
    Run the simulation and plot the graph for problem 2 (no drugs are used,
    viruses do not have any drug resistance).    
    Instantiates a patient, runs a simulation for 300 timesteps, and plots the
    total virus population as a function of time.    
    """
    finalResults = None

    for i in range(0, numTrials):
        #print "running trial", i
        results = runSimulation(numViruses, maxPop, maxBirthProb, clearProb)
        if finalResults == None:
            finalResults = results
        else:
            for j in range(0, len(results)):
                finalResults[j] += results[j]

    for i in range(0, len(finalResults)):
        finalResults[i] /= float(numTrials)
    
    plt.plot(finalResults, label = "SimpleVirus")
    plt.title("SimpleVirus simulation")
    plt.xlabel("time step")
    plt.ylabel("# viruses")
    plt.legend(loc = "best")
    plt.show()

    

def runSimulation(numViruses, maxPop, maxBirthProb, clearProb):
    viruses = []
    for i in range(0, numViruses):
        viruses.append(SimpleVirus(maxBirthProb, clearProb))
    patient = SimplePatient(viruses, maxPop)
    numSteps = 300
    numVirusesEachStep = []
    for i in range(0, numSteps):
        numVirusesEachStep.append(patient.update())
    return numVirusesEachStep



#simulationWithoutDrug(100, 1000, 0.99, 0.05, 2) # viruses grow quickly
#simulationWithoutDrug(100, 1000, 0.1, 0.99, 2) # viruses quickly die
#simulationWithoutDrug(100, 1000, 0.1, 0.05, 8)
        
simulationWithoutDrug(100, 1000, 0.1, 0.05, 100)
